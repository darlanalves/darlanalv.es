var Class = require('jn-classjs'),
	_ = require('lodash'),
	fs = require('fs');

// borrowed from lodash templating
var defaultOptions = {
	evaluate: /\{\[([\s\S]+?)\]\}/,
	escape: /[\[]{2}([\s\S]+?)[\]]{2}/,
	interpolate: /[\{]{2}([\s\S]+?)[}]{2}/
};

var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

/** Used to escape characters for inclusion in compiled string literals */
var stringEscapes = {
	'\\': '\\',
	"'": "'",
	'\n': 'n',
	'\r': 'r',
	'\t': 't',
	'\u2028': 'u2028',
	'\u2029': 'u2029'
};

function escapeStringChar(match) {
	return '\\' + stringEscapes[match];
};

module.exports = Class.create({
	compiled: false,
	compile: true,
	constructor: function(viewPath, options) {
		this.options = options || false;
		this.loadFile(viewPath);
	},

	loadFile: function(path) {
		if (path && fs.existsSync(path)) {
			var file = fs.readFileSync(path);
			if (file) {
				//this.tpl = _.template(file.toString(), null, _.merge(defaultOptions, this.options));
				this.compiled = false;
				this.template = file.toString();
				this.compile && this.compile();
			}
		}
	},

	compile: function() {
		if (!this.compiled) {
			var options = this.options ? _.merge({}, defaultOptions, this.options) : defaultOptions,
				re = options.evaluate.source + '|' + options.interpolate.source + '|' + options.escape.source + '|$';

			var index = 0,
				source = 'o=data||{};var __t,__e = _.escape, __r = \''

				var text = this.template;
			text.replace(new RegExp(re, 'g'), function(match, evaluate, interpolate, escape, offset) {
				source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

				if (evaluate) {
					source += "'+((" + evaluate + ")||'')+'";
				}

				if (escape) {
					source += "'+__e(o." + escape + ")+'";
				}

				if (interpolate) {
					source += "'+(o." + interpolate + "||'')+'";
				}

				index += offset + match.length;
			});

			source += "';return __r;";

			try {
				this.fn = Function('_', 'data', source).bind(this);
			} catch (e) {
				this.fn = function() {
					throw new Error("Invalid template: " + e + "\n" + source);
				};
			}

			this.compiled = true;
			this.template = '';
		}
	},

	render: function(params) {
		this.compiled || this.compile();
		return this.fn(_, params);
	}
});