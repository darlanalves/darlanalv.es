var Class = require('jn-classjs'),
	_ = require('lodash'),
	Err = require('App/Error'),
	Path = require('path'),
	format = require('util').format,
	Response = require('App/Controller/Response'),
	View = require('App/View'),
	MemoryCache = require('App/Cache/Memory');

module.exports = Class.create({
	constructor: function(app, modules) {
		this.app = app;
		this.modules = modules;
		this.viewCache = new MemoryCache();
	},

	dispatch: function(method, request, response, route) {
		var moduleName = route.getModule(),
			controllerName = route.getController(),
			actionName = route.getAction();

		var $module = this.modules[moduleName];
		if (!$module) {
			throw new Error(Err.ModuleNotFound);
		}

		try {
			var ControllerClass = require($module.path + '/controllers/' + getControllerClass(controllerName));
		} catch (e) {
			throw new Error(Err.ControllerNotFound);
		}

		var controllerObj = new ControllerClass($module, request, response);
		if (typeof controllerObj[actionName] === 'function') {
			//console.log('New Request: %s#%s.%s, dispatching', moduleName, controllerName, actionName);
			try {
				var result = controllerObj[actionName]();
				if (!result) {
					result = new Response(200);
				}
			} catch (e) {
				var result = new Response(500);
			}

			this.sendResponse(result, $module, request, response, route);
		} else {
			throw new Error(Err.InvalidAction);
		}
	},

	sendResponse: function(result, $module, request, response, route) {
		var headers = result.getHeaders();
		if (headers) {
			_.each(headers, function(value, header) {
				response.set(header, value);
			}, this);
		}

		response.status(result.getCode());
		var ext = Path.extname(request.url).substr(1).toLowerCase(),
			body = result.getBody(),
			me = this;

		switch (ext) {
		case 'json':
			response.json(body);
			break;

		case 'xml':
			response.set('Content-Type', 'text/xml');
			response.status(415);
			response.send('<?xml version="1.0"?><error>Not implementend</error>');
			break;

		default:
			response.format({
				text: function() {
					var text = JSON.stringify(body, null, "    ");
					text = text.replace(/[{}]|[,]$/img, '');
					response.send(text);
				},

				html: function() {
					var html = '',
						view = me.getRouteView(route);

					if (view) {
						html = view.render(body);
					}

					response.send(html);
				},

				'default': function() {
					response.send(null);
				}
			});
		}
	},

	getRouteView: function(route, options) {
		var moduleName = route.getModule(),
			controllerName = route.getController(),
			actionName = route.getAction(),
			path = format('%s/views/%s/%s.html', this.modules[moduleName].path, controllerName, actionName);

		var view = this.viewCache.get(path);
		if (!view) {
			view = new View(path, options);
			this.viewCache.set(path, view, 3600000);
		} else {
			this.viewCache.keepAlive(path);
		}

		return view;
	}

});

/**
 * Returns the controller canonical name for a given controller name (like "IndexController" to "index")
 * @param {String} controller
 * @return {String}
 */

function getControllerClass(name) {
	return name.substr(0, 1).toUpperCase() + name.substr(1) + 'Controller';
}