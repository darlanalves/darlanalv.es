var Class = require('jn-classjs'),
	_ = require('lodash'),
	fs = require('fs'),

	express = require('express'),
	Cache = require('App/Cache'),
	Module = require('App/Module'),
	Router = require('App/Router'),
	Dispatcher = require('App/Dispatcher'),
	EventEmitter = require('events').EventEmitter;

/**
 * @class App.core.Application
 *
 * - Load plugins TODO
 * - Load modules
 * - Add routes do express
 * - Start listening
 */
module.exports = Class.create({
	extend: EventEmitter,

	constructor: function(config, env) {
		this.env = env;
		this.express = express();
		this.config = config || {};
		this.initEnvironment();
		this.router = new Router();
		this.initModules();
		this.dispatcher = new Dispatcher(this, this.modules);

		// binds the loaded routes to dispatcher
		this.router.each(this.registerRoute, this);
	},

	initEnvironment: function() {
		var cfg = this.config;
		if (cfg.env) {
			_.merge(process.env, cfg.env);
		}
	},

	initModules: function() {
		this.modules = {};
		var cfg = this.getConfig();
		if (cfg.modules) {
			_.each(cfg.modules, function(obj, name) {
				if (obj.enabled !== false) {
					this.loadModule(name, obj);
				}
			}, this);
		}
	},

	/**
	 * Create module object
	 * Load/register routes
	 */
	loadModule: function(name, config) {
		var path = config.path,
			mod = new Module(this, name, path, this.env);

		// module routes
		this.router.loadModuleRoutes(name, path + '/routes/');
		this.modules[name] = mod;
	},

	getModule: function(name) {
		return this.modules[name] || null;
	},

	/**
	 * Register the route with express app
	 * @param {Route} route
	 */
	registerRoute: function(route) {
		var methods = route.getMethods(),
			exp = this.express,
			dispatcher = this.dispatcher;

		_.each(methods, function(method) {
			exp[method](route.getUrl(), function(request, response) {
				dispatcher.dispatch(method, request, response, route);
			});
		}, this);
	},

	/**
	 * Gives access to underlying express app instance
	 */
	getExpress: function() {
		return this.express;
	},

	/**
	 * Gets app config
	 */
	getConfig: function() {
		return this.config;
	},

	/**
	 * Start listening
	 * @param {Number} [port]		Port number to listen to
	 */
	listen: function(port) {
		if (!port) {
			port = 1024 + ~~ (Math.random() * 10000);
		}

		console.log('Listening on port %d', port);
		this.express.listen(port);
	},

	use: function(middleware) {
		this.express.use(middleware);
		return this;
	}

});