var Class = require('jn-classjs'),
	fs = require('fs'),
	_ = require('lodash'),
	Path = require('App/Path'),

	pathPlaceholders = {
		'__ROOT__': Path.rootPath,
		'__MODULE__': Path.modulesPath,
		'__APPLICATION__': Path.applicationPath
	};

var isDir = function(path) {
	if (path) {
		var stats = fs.statSync(path);
		return stats.isDirectory();
	}

	return false;
};

/**
 * @class ConfigLoader
 * Loads one or more .json files recursively, starting on `path`
 */
module.exports = Class.create({
	/**
	 * @constructor
	 * @param {String|String[]} path
	 */
	constructor: function(path) {
		this.data = {};
		if (_.isArray(path)) {
			_.each(path, function(p) {
				this.loadPath(p);
			}, this);
		} else {
			this.loadPath(path);
		}
	},

	getData: function() {
		return this.data;
	},

	loadPath: function(path) {
		if (path && fs.existsSync(path)) {
			if (isDir(path)) {
				this.loadDirectory(path);
			} else {
				this.loadFile(path);
			}
		}
	},

	/**
	 * @private
	 */
	loadDirectory: function(path) {
		if (path.substr(-1, 1) != '/') {
			path += '/';
		}

		var files = fs.readdirSync(path);
		_.each(files, function(file) {
			this.loadPath(path + file);
		}, this);
	},

	/**
	 * @private
	 */
	loadFile: function(path) {
		var json = fs.readFileSync(path).toString();

		_.each(pathPlaceholders, function(value, name) {
			json = json.replace(new RegExp(name, 'g'), value);
		});

		try {
			var data = JSON.parse(json);
			if (data) {
				this.data = _.merge(this.data, data);
			}
		} catch (e) {
			console.log('JSON error: %s in %s', e, path);
		}
	}
});