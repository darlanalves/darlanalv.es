var Class = require('jn-classjs'),
	CacheItem = Class.create({
		ttl: 0,
		value: undefined,
		constructor: function(value, ttl) {
			this.value = value;
			this.ttl = ttl;
			this.time = ttl === -1 ? true : ((new Date).getTime()) + (ttl||0);
		},

		isAlive: function(refTime) {
			refTime = refTime === undefined ? (refTime = (new Date).getTime()) : refTime;
			return this.time === true || this.time > refTime;
		}
	});

/**
 * @class App/Cache/Backend/Memory
 * In memory cache
 */
module.exports = Class.create({
	constructor: function() {
		this.clear();
		setInterval(this.gc.bind(this), 5000); // gc every 5s
	},

	get: function(key) {
		if (this.has(key)) {
			var item = this.$cache[key];
			if (item.isAlive()) {
				return item.value;
			} else {
				this.remove(key);
			}
		}

		return null;
	},

	keepAlive: function(key) {
		var item = this.get(key);
		if (item && item.time !== true) {
			item.time += item.ttl;
		}

		return item;
	},

	set: function(key, value, ttl) {
		this.$cache[key] = new CacheItem(value, ttl);
		return this;
	},

	has: function(key) {
		return this.$cache.hasOwnProperty(key);
	},

	remove: function(key) {
		if (this.has(key)) {
			delete this.$cache[key];
		}

		return this;
	},

	clear: function() {
		this.$cache = {};
		return this;
	},

	gc: function() {
		var that = this,
			$cache = this.$cache,
			time = (new Date).getTime();

		Object.keys($cache).forEach(function(key) {
			if (!$cache[key].isAlive(time)) {
				that.remove(key);
			}
		});
	}
});