var c = require('jn-classjs'),
	MemoryCache = require('App/Cache/Memory'),

	sMemory = 'memory',
	$registry = {},
	has = $registry.hasOwnProperty;

/**
 * Application cache
 * @class Cache
 */
module.exports = c.create({
	statics: {
		/**
		 * Get cache
		 * @param {String} name
		 */
		getCache: function(name) {
			if (has.call($registry, name)) {
				return $registry[name];
			}

			throw new Error('Trying to get invalid cache: ' + name);
		},

		/**
		 * Shared Memory Cache
		 */
		getSharedMemoryCache: function() {
			if (!has.call($registry, sMemory)) {
				this.register(sMemory, this.getMemoryCache());
			}

			return this.get(sMemory);
		},

		/**
		 * Memory Cache Factory
		 */
		getMemoryCache: function() {
			return new MemoryCache();
		},

		/**
		 * Register cache
		 * @param {string} name
		 * @param {Object} backend
		 */
		register: function(name, backend) {
			$registry[name] = backend;
			return this;
		}
	},

	/**
	 * @constructor Cache
	 */
	constructor: function(cacheBackend) {
		var that = this;
		this.backend = cacheBackend;

		['get', 'set', 'has', 'remove', 'clear'].forEach(function(method) {
			that[method] = cacheBackend[method].bind(cacheBackend);
		});
	}
});