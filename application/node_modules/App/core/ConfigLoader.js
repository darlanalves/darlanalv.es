var Class = require('jn-classjs'),
	fs = require('fs'),
	lo = require('lodash');

var rootPath = require('path').dirname(require.main.filename),
	appPath = rootPath + '/application',
	modulesPath = appPath + '/modules';

var isDir = function(path) {
	if (path) {
		var stats = fs.statSync(path);
		return stats.isDirectory();
	}

	return false;
};

/**
 * @class ConfigLoader
 * Loads one or more .json files recursively, starting on `path`
 */
module.exports = Class.define('App.core.ConfigLoader', {
	/**
	 * @constructor
	 * @param {String} path		Start point to scan
	 */
	constructor: function(path) {
		this.config = {};

		this.loadPath(path);
	},

	getConfig: function() {
		return this.config;
	},

	append: function(data) {
		if (data) {
			this.config = lo.merge(this.config, data);
		}

		return this;
	},

	loadPath: function(path) {
		if (path && fs.existsSync(path)) {
			if (isDir(path)) {
				this.loadDirectory(path);
			} else {
				this.loadFile(path);
			}
		}
	},

	/**
	 * @private
	 */
	loadDirectory: function(path) {
		if (path.substr(-1, 1) != '/') {
			path += '/';
		}

		var that = this,
			files = fs.readdirSync(path);

		lo.each(files, function(file) {
			var realPath = path + file;
			that.loadPath(realPath);
		});
	},

	/**
	 * @private
	 */
	loadFile: function(path) {
		var that = this,
			json = fs.readFileSync(path).toString();

		lo.each({
			'__ROOT__': rootPath,
			'__MODULE__': modulesPath,
			'__APPLICATION__': appPath
		}, function(value, name) {
			json = json.replace(name, value);
		});

		var data = JSON.parse(json);
		if (data) {
			this.config = lo.merge(this.config, data);
		}
	}
});