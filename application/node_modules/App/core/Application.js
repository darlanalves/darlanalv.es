var	c = require('jn-classjs'),
	lo = require('lodash'),
	fs = require('fs'),
	Log = require('log'),
	log = new Log('info'),
	express = require('express'),
	CacheFactory = require('App/cache/CacheFactory'),
	Module = require('App/core/Module');

module.exports = c.define('App.core.Application', {
	constructor: function(config) {
		this.app = express();
		this.$config = config ? config.getConfig() : false;
		this.loadModules();
	},

	loadModules: function() {
		var mod = CacheFactory.getMemoryCache(),
			cfg = this.getConfig(),
			app = this;

		this.modules = mod;
		if (cfg) {
			lo.each(cfg.modules, function(module, name) {
				var obj = new Module(name, module.path, app);
				mod.set(name, obj, /* infinite ttl */ -1);
			});
		}
	},

	/*setDispatcher: function(dispatcher) {
		this.dispatcher = dispatcher;
	},

	getDispatcher: function() {
		return this.dispatcher;
	},*/

	/**
	 * Gives access to underlying express app instance
	 */
	getExpress: function() {
		return this.app;
	},

	/**
	 * Gets app config
	 */
	getConfig: function() {
		return this.$config;
	},

	/**
	 * Gets the router
	 *
	getRouter: function() {
		if (!this.router) {
			this.router = new Router(this);
		}

		return this.router;
	},*/

	/**
	 * Start listening
	 * @param {Number} [port]		Port number to listen to
	 */
	listen: function(port) {
		if (!port) {
			port = 1024 + ~~(Math.random() * 10000);
		}

		log.debug('Listening on port %d', port);
		this.app.listen(port);
	}

});