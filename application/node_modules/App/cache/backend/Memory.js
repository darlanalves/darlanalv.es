var c = require('jn-classjs');

var CacheItem = c.create({
	ttl: 0,
	value: undefined,
	constructor: function(value, ttl) {
		this.value = value;
		this.ttl = ttl === -1 ? true : ((new Date).getTime()) + ttl;
	},

	isAlive: function(refTime) {
		return this.ttl === true || time > this.ttl;
	}
});

module.exports = c.define('App.cache.backend.Memory', {
	constructor: function() {
		this.clear();
		setInterval(this.gc.bind(this), 5000);	// gc every 5s
	},

	get: function(key) {
		if (this.has(key)) {
			var item = this.$cache[key];
			if (item.isAlive()) {
				return item.value;
			} else {
				this.remove(key);
			}
		}

		return null;
	},

	set: function(key, value, ttl) {
		this.$cache[key] = new CacheItem(value, ttl);
		return this;
	},

	has: function(key) {
		return this.$cache.hasOwnProperty(key);
	},

	remove: function(key) {
		if (this.has(key)) {
			delete this.$cache[key];
		}

		return this;
	},

	clear: function() {
		this.$cache = {};
		return this;
	},

	gc: function() {
		var that = this,
			$cache = this.$cache;

		Object.keys($cache).forEach(function(key) {
			if (!$cache[key].isAlive()) {
				that.remove(key);
			}
		});
	}
});