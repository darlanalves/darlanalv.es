var c = require('jn-classjs'),
	Cache = require('./Cache'),
	MemoryBackend = require('./backend/Memory'),

	sMemory = 'memory',
	$registry = {},
	has = $registry.hasOwnProperty;

module.exports = c.define('App.cache.CacheFactory', {
	statics: {
		get: function(name) {
			if (has.call($registry, name)) {
				return $registry[name];
			}

			throw new Error('Trying to get invalid cache: ' + name);
		},

		getSharedMemoryCache: function() {
			if (!has.call($registry, sMemory)) {
				this.register(sMemory, this.getMemoryCache());
			}

			return this.get(sMemory);
		},

		getMemoryCache: function() {
			return new Cache(new MemoryBackend());
		},

		register: function(name, backend) {
			$registry[name] = backend;
			return this;
		}
	}
})